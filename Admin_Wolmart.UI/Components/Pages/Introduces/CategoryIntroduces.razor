@page "/danh-muc-gioi-thieu"
@inject CateIntroduceServices _cateIntroduceServices
@rendermode InteractiveServer
<link href="css/introduces.css" rel="stylesheet" />



<div class="page-body">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="card card-table">
                    <div class="card-body">
                        <div class="title-header option-title">
                            <h5>Danh mục bài viết</h5>
                            <form class="d-inline-flex">
                                <a class="align-items-center btn btn-theme d-flex" onclick="window.location.href='/add-categories-introduces'">
                                    <i data-feather="plus-square"></i>Thêm mới Danh mục
                                </a>
                            </form>
                        </div>
                        <div class="icon-box icon-box-side icon-box-light d-flex align-items-center justify-content-between mb-5">
                            <div class="icon-box-content">
                                <h4 class="icon-box-title text-capitalize ls-normal mb-0">  <i class="w-icon-orders"></i></h4>
                            </div>
                            <form @onsubmit="HandleSearch" class="search_box">
                                <input type="text" class="search_input" placeholder="Tìm kiếm đơn hàng..." @bind="keyword">
                                <button type="submit" class="search_button">
                                    <i class="fa-solid fa-magnifying-glass fs-6"></i>
                                </button>
                            </form>
                        </div>


                        <div class="table-responsive category-table">
                            <div>
                                <table class="table all-package theme-table" id="table_id">
                                    <thead>
                                        <tr>
                                            <th>Tên danh mục</th>
                                            <th>Ngày tạo</th>
                                            <th>Trạng thái</th>
                                            <th>Bài viết</th>
                                            <th>Hành động</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @if (cateIntroduces != null && cateIntroduces.Any())
                                        {
                                            @foreach (var item in cateIntroduces)
                                            {
                                                <tr>
                                                    <td class="@(item.Status ? "" : "table_row_disabled")">@item.Name</td>

                                                    <td class="@(item.Status ? "" : "table_row_disabled")">@item.CreatedAt.ToString("dd-MM-yyyy")</td>

                                                    @if (item.Status)
                                                    {
                                                        <td>
                                                            <label class="switch">
                                                                <input type="checkbox" checked @onchange="@((ChangeEventArgs e) => UpdateStatus(item.Id, false))">
                                                                <span class="slider round"></span>
                                                            </label>
                                                        </td>
                                                    }
                                                    else
                                                    {
                                                        <td>
                                                            <label class="switch">
                                                                <input type="checkbox" @onchange="@((ChangeEventArgs e) => UpdateStatus(item.Id, true))">
                                                                <span class="slider round"></span>
                                                            </label>
                                                        </td>

                                                    }


                                                    <td class="@(item.Status ? "" : "table_row_disabled")">@item.TotalCount</td>

                                                    <td>
                                                        <ul>
                                                            <li>
                                                                <a class="@(item.Status ? "" : "table_row_disabled")" href="javascript:void(0)" @onclick="() => GetCategoryOrUpdateByid(item.Id)">
                                                                    <i class="ri-pencil-line"></i>
                                                                </a>
                                                            </li>   

                                                            <li class="@(item.Status ? "" : "table_row_disabled")">
                                                                @if (IsLoading(item.Id))
                                                                {
                                                                    <IconLoad></IconLoad>
                                                                }
                                                                else
                                                                {
                                                                    <a href="javascript:void(0)" @onclick="() => DeleteCategory(item.Id)">
                                                                        <i class="ri-delete-bin-line"></i>
                                                                    </a>
                                                                }
                                                            </li>
                                                        </ul>
                                                    </td>
                                                </tr>

                                            }
                                        }

                                    </tbody>

                                </table>
                                @if (totalPages > 1)
                                {
                                    <nav class="custome-pagination mt-5">
                                        <ul class="pagination justify-content-center custom_pagination_ul">
                                            <li class="page-item custom_lef @(currentPage == 1 ? "disabled" : "")">
                                                <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage" aria-label="Previous" tabindex="-1" aria-disabled="@(currentPage == 1)">
                                                    <i class="fa-solid fa-angles-left"></i>
                                                </a>
                                            </li>
                                            @for (int i = 1; i <= totalPages; i++)
                                            {
                                                var pageNumber = i;

                                                <li class="page-item custom_left_item @(pageNumber == currentPage ? "active" : "")" style="z-index: 0">
                                                    <a class="page-link" href="javascript:void(0)" @onclick="(() => ChangePage(pageNumber))">@pageNumber</a>
                                                </li>
                                            }

                                            <li class="page-item custom_left @(currentPage == totalPages ? "disabled" : "")">
                                                <a class="page-link" href="javascript:void(0)" @onclick="NextPage" aria-label="Next">
                                                    <i class="fa-solid fa-angles-right"></i>
                                                </a>
                                            </li>
                                        </ul>
                                    </nav>

                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


@code 
{
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    private IEnumerable<CategoryIntroduceDto> cateIntroduces;
    private CategoryIntroduceDto category;

    private string? keyword = null;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private int totalCount;

    private bool isModalOpen = false;
    private Dictionary<Guid, bool> LoadingStates = new Dictionary<Guid, bool>();

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("pageNumber", out var page))
        {
            int.TryParse(page, out currentPage);
        }

        if (query.TryGetValue("keyword", out var key))
        {
            keyword = key.ToString();
        }

        await CheckUserAuthentication();
        await LoadListCategoriesIntroduces();
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (!isUserAuthenticated)
            NavigationManager.NavigateTo("/account/login");
    }

    private async Task GetCategoryOrUpdateByid(Guid id)
    {
        NavigationManager.NavigateTo($"/cap-nhat-danh-muc/{id}", forceLoad: true);
    }

    private async Task DeleteCategory(Guid id)
    {
        LoadingStates[id] = true;
        bool isDeleted = await _cateIntroduceServices.DeleteCategoryIntroduceAsync(id);

        if (isDeleted)
        {
            await LoadListCategoriesIntroduces();
        }

        await Task.Delay(1000);
        LoadingStates[id] = false;
    }

    private bool IsLoading(Guid id)
    {
        return LoadingStates.ContainsKey(id) && LoadingStates[id];
    }

    private async Task LoadListCategoriesIntroduces()
    {
        var response = await _cateIntroduceServices.GetAllCategoryPaginationAsync(currentPage, pageSize, keyword);

        if (response != null && response.Success)
        {
            cateIntroduces = response.Data.categories;
            totalCount = response.Data.TotalCount;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
        }
        else
        {
            cateIntroduces = new List<CategoryIntroduceDto>();
        }

    }

    private async Task ChangePage(int page)
    {
        // Chỉ cập nhật nếu page khác currentPage
        if (page != currentPage)
        {
            currentPage = page;
            await UpdateUrlAndLoadCategories();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await UpdateUrlAndLoadCategories();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await UpdateUrlAndLoadCategories();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());

        currentPage = 1;
        await UpdateUrlAndLoadCategories();
    }

    private async Task HandleSearch()
    {
        currentPage = 1;
        await UpdateUrlAndLoadCategories();

    }

    private async Task UpdateStatus(Guid id, bool status)
    {
        bool isSuccess = await _cateIntroduceServices.UpdateCategoryIntroduceStatusAsync(id, status);

        if (isSuccess)
        {
            await LoadListCategoriesIntroduces();
        }
    }

    private async Task UpdateUrlAndLoadCategories()
    {
        var queryParameters = new Dictionary<string, string>
            {
                ["pageNumber"] = currentPage.ToString(),
                ["pageSize"] = pageSize.ToString()
            };

        if (!string.IsNullOrEmpty(keyword))
        {
            queryParameters["keyword"] = keyword;
        }

        var newUrl = QueryHelpers.AddQueryString("danh-muc-gioi-thieu", queryParameters!);

        NavigationManager.NavigateTo(newUrl, forceLoad: false);

        await LoadListCategoriesIntroduces();
    }
}