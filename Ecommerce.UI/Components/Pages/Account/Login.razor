@page "/account/dang-nhap"
@inject AccountServices AccountService
@inject ILocalStorageService LocalStorage
@inject AuthState AuthState
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<link href="css/account.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="assets/css/style.min.css">

<main class="main login-page">
    <div class="page-content">
        <div class="container">
            <div class="login-popup">
                <div class="tab tab-nav-boxed tab-nav-center tab-nav-underline">
                    <ul class="nav nav-tabs text-uppercase" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" style="border:unset">Đăng Nhập</a>
                        </li>
                    </ul>
                    @if (loginFailed)
                    {
                        <div class="alert alert-danger">Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin.</div>
                    }
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="tab-content w-100" id="form-login" FormName="form-login">
                        <DataAnnotationsValidator />
                        <div class="tab-pane active">
                            <div class="form-group">
                                <label>Email *</label>
                                <InputText @bind-Value="loginModel.Email" type="text" class="form-control" name="email" />
                                <ValidationMessage class="text-danger" For="@(() => loginModel.Email)" />
                            </div>
                            <div class="form-group mb-0 input_item_auth">
                                <label>Mật khẩu *</label>
                                <InputText @bind-Value="loginModel.Password" type="@passwordFieldType" class="form-control" name="password" />
                                <ValidationMessage class="text-danger" For="@(() => loginModel.Password)" />
                                <span class="fa @iconClass field-icon" @onclick="TogglePasswordVisibility"></span>
                            </div>
                            <div class="form-checkbox d-flex align-items-center justify-content-between">
                                <a class="text-danger" href="/account/forgot-password">Quên mật khẩu?</a>
                                <a class="text-danger" href="/account/confirm-email">Quên mật khẩu?</a>
                            </div>
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-primary cursor" type="submit">Đăng nhập</button>
                            }

                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</main>
@code {
    public bool ShowLoadingButton { get; set; } = false;
    private LoginDto loginModel = new LoginDto();
    private string loginError;
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;
    private string passwordFieldType = "password";
    private string iconClass = "fa-eye-slash";

    private bool loginFailed = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = "url";
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Gọi GetAuthenticationStateAsync ở đây
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            // Thực hiện các thao tác cần thiết với authState
        }
    }

    private async Task HandleLogin()
    {
        ShowLoadingButton = true;
        loginFailed = false;


        var result = await AccountService.Login(loginModel);
        ShowLoadingButton = false;

        if (result.IsAuthSuccessful)
        {
            errorMessage = string.Empty;

            AuthState.IsLoggedIn = true;
            ToastService.ShowSuccess("Đăng nhập thành công!");

            // Lưu token vào LocalStorage
            await LocalStorage.SetItemAsync("authToken", result.Token);
            ((CustomAuthStateProvider)AuthenticationStateProvider).NotifyUserAuthentication(result.Token);

            StateHasChanged();

            await Task.Delay(1000);
            NavigationManager.NavigateTo(returnUrl, forceLoad: true);
        }
        else
        {
            loginError = "Đăng nhập không thành công. Vui lòng kiểm tra thông tin đăng nhập của bạn";
            loginFailed = true;
            ToastService.ShowError(loginError);
            return;
        }
        ShowLoadingButton = false;
    }

    private void TogglePasswordVisibility()
    {
        if (passwordFieldType == "password")
        {
            passwordFieldType = "text";
            iconClass = "fa-eye";
        }
        else
        {
            passwordFieldType = "password";
            iconClass = "fa-eye-slash";
        }
    }
}
