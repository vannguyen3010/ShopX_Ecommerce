@page "/san-pham"

@inject ProductServices ProductServices
@rendermode InteractiveServer
@* @layout InnerPageLayout *@

<link href="assets/css/demo9.min.css" rel="stylesheet" />
<link href="css/product.css" rel="stylesheet" />


<main class="main">
    <P_BreadCrumb BreadCrumb="@breadCrumb" />
    <!-- End of Breadcrumb-nav -->

    <div class="page-content mb-10">
        <div class="container">
            <!-- Start of Shop Content -->
            <div class="shop-content row gutter-lg">


                <aside class="sidebar shop-sidebar sticky-sidebar-wrapper sidebar-fixed">
                    <!-- Start of Sidebar Overlay -->
                    <div class="sidebar-overlay"></div>
                    <a class="sidebar-close" href="#"><i class="close-icon"></i></a>

                    <!-- Start of Sidebar Content -->
                    <div class="sidebar-content scrollable">
                        <!-- Start of Sticky Sidebar -->
                        <div class="sticky-sidebar">
                            <div class="widget widget-collapsible">
                                <h3 class="widget-title"><span>Danh mục</span></h3>
                                <ul class="widget-body filter-items search-ul">
                                    @if (cateProducts != null && cateProducts.Any())
                                    {
                                        @foreach (var item in cateProducts)
                                        {
                                            <li>
                                                <a onclick="window.location.href='/san-pham/?c1=@item.Id';" class="cursor">
                                                    @item.Name
                                                </a>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                            <!-- Start of Collapsible Widget -->
                            <div class="widget widget-collapsible">
                                <h3 class="widget-title"><label>Giá</label></h3>
                                <div class="widget-body">
                                    <ul class="filter-items search-ul">
                                        <li><a href="javascript:void(0)" @onclick="() => FilterByPrice(0, 100)">0.00 - 100.00</a></li>
                                        <li><a href="javascript:void(0)" @onclick="() => FilterByPrice(100, 200)">100.00 - 200.00</a></li>
                                        <li><a href="javascript:void(0)" @onclick="() => FilterByPrice(200, 300)">200.00 - 300.00</a></li>
                                        <li><a href="javascript:void(0)" @onclick="() => FilterByPrice(300, 500)">300.00 - 500.00</a></li>
                                        <li><a href="javascript:void(0)" @onclick="() => FilterByPrice(500, null)">500.00+</a></li>
                                    </ul>
                                    <form class="price-range">
                                        <input type="number" name="min_price" class="min_price text-center" @bind="minPrice" placeholder="$min">
                                        <span class="delimiter">-</span>
                                        <input type="number" name="max_price" class="max_price text-center" @bind="maxPrice" placeholder="$max">
                                        <a href="javascript:void(0)" @onclick="ApplyCustomPriceRange" class="btn btn-primary btn-rounded">Go</a>
                                    </form>
                                </div>
                            </div>

                        </div>
                        <!-- End of Sidebar Content -->
                    </div>
                    <!-- End of Sidebar Content -->
                </aside>

                <div class="main-content">


                    <div class="owl-carousel owl-theme"
                         data-owl-options="{
                            'loop': true,
                            'autoplay': true,
                            'autoplayTimeout': 5000,
                            'nav': true,
                            'dots': true,
                            'margin': 20,
                            'responsive': {
                                '0': {
                                    'items': 1
                                },
                                '576': {
                                    'items': 1
                                },
                                '768': {
                                    'items': 1
                                },
                                '992': {
                                    'items': 1
                                },
                                '1200': {
                                    'items': 1
                                }
                            }
                         }">
                        @if (bannerProducts != null && bannerProducts.Any())
                        {
                            @foreach (var item in bannerProducts)
                            {
                                <div class="shop-default-banner shop-boxed-banner banner d-flex align-items-center mb-6 br-xs"
                                     style="background-image: url('@(string.IsNullOrEmpty(item.FilePath) ? "/Img_Dev/banner.png" : item.FilePath)'); background-color: #494844;"
                                     onerror="this.onerror=null;this.src='/Img_Dev/banner.png';">
                                    <div class="banner-content">
                                        <h4 class="banner-subtitle font-weight-normal text-uppercase text-white ls-normal">
                                            @item.Title
                                        </h4>
                                        <h3 class="banner-title text-white text-capitalize ls-25">@item.Desc</h3>
                                        <a href=""
                                           class="btn btn-white btn-rounded btn-icon-right btn-outline">
                                            Xem thêm<i class="w-icon-long-arrow-right"></i>
                                        </a>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <nav class="toolbox sticky-toolbox sticky-content fix-top">

                        <div class="toolbox-left">
                            <a href="#" class="btn btn-primary btn-outline btn-rounded left-sidebar-toggle
                                        btn-icon-left d-block d-lg-none">
                                <i class="w-icon-category"></i><span>Filters</span>
                            </a>
                        </div>
                        <div class="toolbox-right">
                            <div class="toolbox-item toolbox-show select-box">
                                <select @onchange="OnPageSizeChanged" class="form-control select_item">
                                    <option selected="selected">sản phẩm / trang</option>
                                    <option value="16">16 sản phẩm / trang</option>
                                    <option value="24">24 sản phẩm / trang</option>
                                    <option value="36">36 sản phẩm / trang</option>
                                    <option value="48">48 sản phẩm / trang</option>
                                    <option value="64">64 sản phẩm / trang</option>
                                </select>
                            </div>
                        </div>
                    </nav>
                    <div class="product-wrapper row cols-lg-4 cols-md-3 cols-sm-2 cols-2">
                        @if (products != null && products.Any())
                        {
                            @foreach (var item in products)
                            {
                                <div class="product-wrap">
                                    <div class="product text-center img__wrapper">
                                        <figure class="product-media spotlight">
                                            <a onclick="window.location.href='/san-pham/@item.NameSlug/@item.Id';" class="cursor">
                                                <img src="@(string.IsNullOrEmpty(item.ImageFilePath) ? "/Img_Dev/banner.png" : item.ImageFilePath)" alt="Product"
                                                     width="300" height="338" onerror="this.onerror=null;this.src='/Img_Dev/banner.png';" />
                                            </a>
                                        </figure>
                                        <img src="http://www.savoy-sharm.com/media-room/images/hi-res/king-bed-room-accommodation-savoy-luxury-5-stars-accommodation-sharm-el-sheikh.jpg" alt="" />
                                        @if (item.Discount > 1)
                                        {
                                            <a class="sold_out">- @item.Discount.ToString("N0") </a>
                                        }
                                        <div class="product-details">
                                            <h4 class="product-name"><a onclick="window.location.href='/san-pham/@item.NameSlug/@item.Id';" class="cursor">@item.Name</a></h4>
                                            <div class="ratings-container">
                                                <div class="star-rating">
                                                    @for (int i = 0; i < item.Rating; i++)
                                                    {
                                                        <span class="fa fa-star checked"></span>
                                                    }
                                                    @for (int i = 0; i < (5 - item.Rating); i++)
                                                    {
                                                        <span class="fa fa-star"></span>
                                                    }

                                                </div>
                                            </div>
                                            @if (item.Discount > 0)
                                            {
                                                <div class="product-price">
                                                    <del class="old-price">@item.Price.ToString("N0")  <span class="currency-symbol">đ</span>  </del>
                                                    <ins class="new-price text-danger">@((item.Price - item.Discount).ToString("N0")) <span class="currency-symbol">đ</span></ins>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="product-price">
                                                    <ins class="new-price text-danger">@((item.Price).ToString("N0")) <span class="currency-symbol">đ</span></ins>
                                                </div>
                                            }

                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="container">
                                <div class="d-flex justify-content-center">
                                    <img src="img_dev/datanull.jpg" class="img-fluid" alt="Image" />
                                </div>

                            </div>
                        }
                    </div>
                    @if (totalPages > 1)
                    {
                        <div class="toolbox toolbox-pagination justify-content-between">
                            <p class="showing-info mb-2 mb-sm-0">
                                <span class="text-danger fs-4">Kết quả :</span>
                                <span class="fs-4 mx-0"> @totalCount Sản phẩm</span>
                            </p>
                            <ul class="pagination">
                                <li class="prev @(currentPage == 1 ? "disabled" : "")">
                                    <a href="javascript:void(0)" @onclick="PreviousPage" aria-label="Previous" tabindex="-1" aria-disabled="@(currentPage == 1)">
                                        <i class="w-icon-long-arrow-left"></i> Prev
                                    </a>
                                </li>
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    var pageNumber = i;  // Tạo biến tạm để lưu giá trị của trang hiện tại

                                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                        <a class="page-link" href="javascript:void(0)" @onclick="(() => ChangePage(pageNumber))">@pageNumber</a>
                                    </li>
                                }
                                <li class="next @(currentPage == totalPages ? "disabled" : "")">
                                    <a href="javascript:void(0)" @onclick="NextPage" aria-label="Next">
                                        Next <i class="w-icon-long-arrow-right"></i>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
</main>

@code {
    private VM_BreadCrumb breadCrumb;
    private IEnumerable<BannerProductDto> bannerProducts;
    private IEnumerable<ProductDto> products;
    private IEnumerable<CateProductDto> cateProducts;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private int totalCount;
    private int? type;

    private Guid? categoryId = null;
    private decimal? minPrice = null;
    private decimal? maxPrice = null;
    private string? keyword = null;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("keyword", out var searchKeyword))
        {
            keyword = searchKeyword;
        }

        if (query.TryGetValue("c1", out var c1Id))
        {
            categoryId = new Guid(c1Id!);
            // await LoadListProducts();
            var categoryResponse = await ProductServices.GetCategoryProductByCategoryId(categoryId.Value);

            if (categoryResponse != null && categoryResponse.Success)
            {
                var category = categoryResponse.Data;

                breadCrumb = new VM_BreadCrumb
                    {
                        lv1Name = "Trang chủ",
                        lv1Url = "/",
                        lv2Name = category.Name,
                        lv2Url = $"/gioi-thieu?c1={category.Id}",
                    };
            }
            await LoadListProducts();
        }
        else if (query.TryGetValue("c2", out var c2Id))
        {
            categoryId = new Guid(c2Id!);
            var categoryResponse = await ProductServices.GetCategoryProductByCategoryId(categoryId.Value);

            if (categoryResponse != null && categoryResponse.Success)
            {
                var category = categoryResponse.Data;

                breadCrumb = new VM_BreadCrumb
                    {
                        lv1Name = "Trang chủ",
                        lv1Url = "/",
                        lv2Name = category.ParentCategory.Name,
                        lv2Url = $"/san-pham?c1={category.ParentCategory.Id}",
                        lv3Name = category.Name,
                        lv3Url = $"/san-pham?c2={category.Id}",
                    };
            }
            await LoadListProducts();
        }

        if (query.TryGetValue("pageNumber", out var page))
        {
            int.TryParse(page, out currentPage);
        }

        if (query.TryGetValue("type", out var typeValue))
        {
            int.TryParse(typeValue, out var parsedType);
            type = parsedType;
        }

        await LoadListProducts();
        await LoadBannerProducts();
        await LoadListCategoryProduct();
    }

    private async Task LoadBannerProducts()
    {
        var response = await ProductServices.GetAllBannerPositionProductPopup(BannerProductWithPopupPosition.Product);
        if (response != null && response.Any())
        {
            bannerProducts = response.ToList();
        }
        else
        {
            bannerProducts = new List<BannerProductDto>();
        }
    }

    private async Task LoadListCategoryProduct()
    {
        cateProducts = await ProductServices.GetAllCategoryProductsHaveProduct();
    }

    private async Task LoadListProducts()
    {
        var response = await ProductServices.GetListProductAsync(currentPage, pageSize, minPrice, maxPrice, categoryId, keyword, type);
        if (response != null && response.Success)
        {
            products = response.Data.Products;
            totalCount = response.Data.TotalCount;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
        }
        else
        {
            products = new List<ProductDto>();
        }
    }

    private async Task FilterByPrice(decimal? min, decimal? max)
    {
        minPrice = min;
        maxPrice = max;

        currentPage = 1;
        await UpdateUrlAndLoadProducts();
    }

    private async Task ApplyCustomPriceRange()
    {
        if (minPrice.HasValue || maxPrice.HasValue)
        {
            currentPage = 1;
            await UpdateUrlAndLoadProducts();
        }
    }

    private async Task ChangePage(int page)
    {
        // Chỉ cập nhật nếu page khác currentPage
        if (page != currentPage)
        {
            currentPage = page;
            await UpdateUrlAndLoadProducts();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await UpdateUrlAndLoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await UpdateUrlAndLoadProducts();
        }
    }


    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());

        currentPage = 1;
        await UpdateUrlAndLoadProducts();
    }

    // Cập nhật URL và gọi API để lấy danh sách sản phẩm
    private async Task UpdateUrlAndLoadProducts()
    {
        // Tạo URL mới với thông tin trang hiện tại, kích thước trang, và giá lọc
        var queryParameters = new Dictionary<string, string>
            {
                ["pageNumber"] = currentPage.ToString(),
                ["pageSize"] = pageSize.ToString()
            };

        // Thêm giá trị lọc theo giá vào URL nếu có
        if (minPrice.HasValue)
        {
            queryParameters["minPrice"] = minPrice.Value.ToString();
        }

        if (maxPrice.HasValue)
        {
            queryParameters["maxPrice"] = maxPrice.Value.ToString();
        }

        if (type.HasValue)
        {
            queryParameters["type"] = type.Value.ToString();
        }

        // Tạo URL query string
        var newUrl = QueryHelpers.AddQueryString("san-pham", queryParameters!);
        NavigationManager.NavigateTo(newUrl, forceLoad: true);

        // Tải lại danh sách sản phẩm
        await LoadListProducts();
    }
}